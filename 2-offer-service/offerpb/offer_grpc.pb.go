// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package offerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfferClient is the client API for Offer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferClient interface {
	GetOfferStream(ctx context.Context, in *GetOfferStreamRequest, opts ...grpc.CallOption) (Offer_GetOfferStreamClient, error)
	GetOfferDetails(ctx context.Context, in *GetOfferDetailsRequest, opts ...grpc.CallOption) (*GetOfferDetailsResponse, error)
	UpdatePartnerTotalOrder(ctx context.Context, in *UpdatePartnerTotalOrderRequest, opts ...grpc.CallOption) (*UpdatePartnerTotalOrderResponse, error)
	UpdatePartnerRating(ctx context.Context, in *UpdatePartnerRatingRequest, opts ...grpc.CallOption) (*UpdatePartnerRatingResponse, error)
}

type offerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferClient(cc grpc.ClientConnInterface) OfferClient {
	return &offerClient{cc}
}

func (c *offerClient) GetOfferStream(ctx context.Context, in *GetOfferStreamRequest, opts ...grpc.CallOption) (Offer_GetOfferStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Offer_ServiceDesc.Streams[0], "/offerpb.Offer/GetOfferStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &offerGetOfferStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Offer_GetOfferStreamClient interface {
	Recv() (*GetOfferStreamResponse, error)
	grpc.ClientStream
}

type offerGetOfferStreamClient struct {
	grpc.ClientStream
}

func (x *offerGetOfferStreamClient) Recv() (*GetOfferStreamResponse, error) {
	m := new(GetOfferStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *offerClient) GetOfferDetails(ctx context.Context, in *GetOfferDetailsRequest, opts ...grpc.CallOption) (*GetOfferDetailsResponse, error) {
	out := new(GetOfferDetailsResponse)
	err := c.cc.Invoke(ctx, "/offerpb.Offer/GetOfferDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) UpdatePartnerTotalOrder(ctx context.Context, in *UpdatePartnerTotalOrderRequest, opts ...grpc.CallOption) (*UpdatePartnerTotalOrderResponse, error) {
	out := new(UpdatePartnerTotalOrderResponse)
	err := c.cc.Invoke(ctx, "/offerpb.Offer/UpdatePartnerTotalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerClient) UpdatePartnerRating(ctx context.Context, in *UpdatePartnerRatingRequest, opts ...grpc.CallOption) (*UpdatePartnerRatingResponse, error) {
	out := new(UpdatePartnerRatingResponse)
	err := c.cc.Invoke(ctx, "/offerpb.Offer/UpdatePartnerRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferServer is the server API for Offer service.
// All implementations must embed UnimplementedOfferServer
// for forward compatibility
type OfferServer interface {
	GetOfferStream(*GetOfferStreamRequest, Offer_GetOfferStreamServer) error
	GetOfferDetails(context.Context, *GetOfferDetailsRequest) (*GetOfferDetailsResponse, error)
	UpdatePartnerTotalOrder(context.Context, *UpdatePartnerTotalOrderRequest) (*UpdatePartnerTotalOrderResponse, error)
	UpdatePartnerRating(context.Context, *UpdatePartnerRatingRequest) (*UpdatePartnerRatingResponse, error)
	mustEmbedUnimplementedOfferServer()
}

// UnimplementedOfferServer must be embedded to have forward compatible implementations.
type UnimplementedOfferServer struct {
}

func (UnimplementedOfferServer) GetOfferStream(*GetOfferStreamRequest, Offer_GetOfferStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOfferStream not implemented")
}
func (UnimplementedOfferServer) GetOfferDetails(context.Context, *GetOfferDetailsRequest) (*GetOfferDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferDetails not implemented")
}
func (UnimplementedOfferServer) UpdatePartnerTotalOrder(context.Context, *UpdatePartnerTotalOrderRequest) (*UpdatePartnerTotalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerTotalOrder not implemented")
}
func (UnimplementedOfferServer) UpdatePartnerRating(context.Context, *UpdatePartnerRatingRequest) (*UpdatePartnerRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerRating not implemented")
}
func (UnimplementedOfferServer) mustEmbedUnimplementedOfferServer() {}

// UnsafeOfferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferServer will
// result in compilation errors.
type UnsafeOfferServer interface {
	mustEmbedUnimplementedOfferServer()
}

func RegisterOfferServer(s grpc.ServiceRegistrar, srv OfferServer) {
	s.RegisterService(&Offer_ServiceDesc, srv)
}

func _Offer_GetOfferStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOfferStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OfferServer).GetOfferStream(m, &offerGetOfferStreamServer{stream})
}

type Offer_GetOfferStreamServer interface {
	Send(*GetOfferStreamResponse) error
	grpc.ServerStream
}

type offerGetOfferStreamServer struct {
	grpc.ServerStream
}

func (x *offerGetOfferStreamServer) Send(m *GetOfferStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Offer_GetOfferDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).GetOfferDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offerpb.Offer/GetOfferDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).GetOfferDetails(ctx, req.(*GetOfferDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_UpdatePartnerTotalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerTotalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).UpdatePartnerTotalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offerpb.Offer/UpdatePartnerTotalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).UpdatePartnerTotalOrder(ctx, req.(*UpdatePartnerTotalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offer_UpdatePartnerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServer).UpdatePartnerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offerpb.Offer/UpdatePartnerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServer).UpdatePartnerRating(ctx, req.(*UpdatePartnerRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Offer_ServiceDesc is the grpc.ServiceDesc for Offer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offerpb.Offer",
	HandlerType: (*OfferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOfferDetails",
			Handler:    _Offer_GetOfferDetails_Handler,
		},
		{
			MethodName: "UpdatePartnerTotalOrder",
			Handler:    _Offer_UpdatePartnerTotalOrder_Handler,
		},
		{
			MethodName: "UpdatePartnerRating",
			Handler:    _Offer_UpdatePartnerRating_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOfferStream",
			Handler:       _Offer_GetOfferStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "offer.proto",
}
