// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrderDetailStream(ctx context.Context, in *GetOrderDetailsRequest, opts ...grpc.CallOption) (Order_GetOrderDetailStreamClient, error)
	HandleOrderCompletion(ctx context.Context, in *HandleOrderCompletionRequest, opts ...grpc.CallOption) (*HandleOrderCompletionResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/orderpb.Order/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrderDetailStream(ctx context.Context, in *GetOrderDetailsRequest, opts ...grpc.CallOption) (Order_GetOrderDetailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Order_ServiceDesc.Streams[0], "/orderpb.Order/GetOrderDetailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderGetOrderDetailStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Order_GetOrderDetailStreamClient interface {
	Recv() (*GetOrderDetailsResponse, error)
	grpc.ClientStream
}

type orderGetOrderDetailStreamClient struct {
	grpc.ClientStream
}

func (x *orderGetOrderDetailStreamClient) Recv() (*GetOrderDetailsResponse, error) {
	m := new(GetOrderDetailsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderClient) HandleOrderCompletion(ctx context.Context, in *HandleOrderCompletionRequest, opts ...grpc.CallOption) (*HandleOrderCompletionResponse, error) {
	out := new(HandleOrderCompletionResponse)
	err := c.cc.Invoke(ctx, "/orderpb.Order/HandleOrderCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrderDetailStream(*GetOrderDetailsRequest, Order_GetOrderDetailStreamServer) error
	HandleOrderCompletion(context.Context, *HandleOrderCompletionRequest) (*HandleOrderCompletionResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServer) GetOrderDetailStream(*GetOrderDetailsRequest, Order_GetOrderDetailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderDetailStream not implemented")
}
func (UnimplementedOrderServer) HandleOrderCompletion(context.Context, *HandleOrderCompletionRequest) (*HandleOrderCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOrderCompletion not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrderDetailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderDetailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServer).GetOrderDetailStream(m, &orderGetOrderDetailStreamServer{stream})
}

type Order_GetOrderDetailStreamServer interface {
	Send(*GetOrderDetailsResponse) error
	grpc.ServerStream
}

type orderGetOrderDetailStreamServer struct {
	grpc.ServerStream
}

func (x *orderGetOrderDetailStreamServer) Send(m *GetOrderDetailsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Order_HandleOrderCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOrderCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HandleOrderCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/HandleOrderCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HandleOrderCompletion(ctx, req.(*HandleOrderCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderpb.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Order_CreateOrder_Handler,
		},
		{
			MethodName: "HandleOrderCompletion",
			Handler:    _Order_HandleOrderCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderDetailStream",
			Handler:       _Order_GetOrderDetailStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
